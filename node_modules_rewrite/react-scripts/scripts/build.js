// @remove-on-eject-begin
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// @remove-on-eject-end
'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'production';
process.env.NODE_ENV = 'production';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const path = require('path');
const chalk = require('chalk');
const fs = require('fs-extra');
const webpack = require('webpack');
const config = require('../config/webpack.config.prod');
const paths = require('../config/paths');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const printHostingInstructions = require('react-dev-utils/printHostingInstructions');
const FileSizeReporter = require('react-dev-utils/FileSizeReporter');
const printBuildError = require('react-dev-utils/printBuildError');

const measureFileSizesBeforeBuild =
  FileSizeReporter.measureFileSizesBeforeBuild;
const printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;
const useYarn = fs.existsSync(paths.yarnLockFile);

// These sizes are pretty large. We'll warn for bundles exceeding them.
const WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;
const WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// First, read the current file sizes in build directory.
// This lets us display how much they changed later.
measureFileSizesBeforeBuild(paths.appBuild)
  .then(previousFileSizes => {
    // Remove all content but keep the directory so that
    // if you're in it, you don't end up in Trash
    fs.emptyDirSync(paths.appBuild);
    // Merge with the public folder
    copyPublicFolder();
    // Start the webpack build
    return build(previousFileSizes);
  })
  .then(
    ({ stats, previousFileSizes, warnings }) => {
      if (warnings.length) {
        console.log(chalk.yellow('Compiled with warnings.\n'));
        console.log(warnings.join('\n\n'));
        console.log(
          '\nSearch for the ' +
            chalk.underline(chalk.yellow('keywords')) +
            ' to learn more about each warning.'
        );
        console.log(
          'To ignore, add ' +
            chalk.cyan('// eslint-disable-next-line') +
            ' to the line before.\n'
        );
      } else {
        console.log(chalk.green('Compiled successfully.\n'));
      }

      console.log('File sizes after gzip:\n');
      printFileSizesAfterBuild(
        stats,
        previousFileSizes,
        paths.appBuild,
        WARN_AFTER_BUNDLE_GZIP_SIZE,
        WARN_AFTER_CHUNK_GZIP_SIZE
      );
      console.log();

      const appPackage = require(paths.appPackageJson);
      const publicUrl = paths.publicUrl;
      const publicPath = config.output.publicPath;
      const buildFolder = path.relative(process.cwd(), paths.appBuild);
      printHostingInstructions(
        appPackage,
        publicUrl,
        publicPath,
        buildFolder,
        useYarn
      );
      //生成云端包
      buildCloud();
    },
    err => {
      console.log(chalk.red('Failed to compile.\n'));
      printBuildError(err);
      process.exit(1);
    }
  );

// Create the production build and print the deployment instructions.
function build(previousFileSizes) {
  console.log('Creating an optimized production build...');

  let compiler = webpack(config);
  return new Promise((resolve, reject) => {
    compiler.run((err, stats) => {
      if (err) {
        return reject(err);
      }
      const messages = formatWebpackMessages(stats.toJson({}, true));
      if (messages.errors.length) {
        // Only keep the first error. Others are often indicative
        // of the same problem, but confuse the reader with noise.
        if (messages.errors.length > 1) {
          messages.errors.length = 1;
        }
        return reject(new Error(messages.errors.join('\n\n')));
      }
      if (
        process.env.CI &&
        (typeof process.env.CI !== 'string' ||
          process.env.CI.toLowerCase() !== 'false') &&
        messages.warnings.length
      ) {
        console.log(
          chalk.yellow(
            '\nTreating warnings as errors because process.env.CI = true.\n' +
              'Most CI servers set it automatically.\n'
          )
        );
        return reject(new Error(messages.warnings.join('\n\n')));
      }
      return resolve({
        stats,
        previousFileSizes,
        warnings: messages.warnings,
      });
    });
  });
}

function copyPublicFolder() {
  fs.copySync(paths.appPublic, paths.appBuild, {
    dereference: true,
    filter: file => file !== paths.appHtml,
  });
}
     
/* 
 * 云端比对文件生成全量包和补丁包
 * @author baohuo@gmail.com
 * @create 2018/1/5 10:20
 */
function buildCloud(){
	paths.pack = path.resolve(process.cwd(), 'pack');
	paths.packAll = path.resolve(paths.pack, 'all');
  paths.packPatch = path.resolve(paths.pack, 'patch');

	//生成补丁包
	fs.emptyDirSync(paths.packPatch);
  fs.copySync(paths.appBuild, paths.packPatch, {
    dereference: true,
    filter: filePath => {
    	let states = fs.statSync(filePath);
    	let pre_path = filePath.replace(paths.appBuild, paths.packAll);
    	let pre_states = {size: -1};
    	if(fs.existsSync(pre_path)){
    		pre_states = fs.statSync(pre_path);
    	}
			//去除模块包
    	if(states.isDirectory()){
	    	if(filePath.indexOf(path.join('static', 'js', '/')) !== -1 ||
	    		filePath.indexOf('.svn') !== -1){
	    		return false;
	    	}
    	}
    	if(pre_states.size === -1
    		|| filePath.indexOf("index.html") !== -1
    		|| states.isDirectory()
    		|| states.size !== pre_states.size){
    		return true;
    	}
    	return false;
    }
  });
  //清除补丁包空文件夹
	clearEmptyDir(paths.packPatch);
	function clearEmptyDir(dirPath) {
  	if(!fs.existsSync(dirPath)){
  		return;
  	}
		let files = fs.readdirSync(dirPath);
	 	files.forEach(function(fileName){
	 		let filePath = path.resolve(dirPath, fileName);
    	if(!fs.existsSync(filePath)){
    		return;
    	}
	  	let states = fs.statSync(filePath); 
			if(states.isDirectory()){
	  		let size = fs.readdirSync(filePath).length;
	  		if(size === 0){
	  			fs.rmdirSync(filePath);
	  			clearEmptyDir(path.dirname(filePath));
	  		}else{
	 				clearEmptyDir(filePath);
	  		}
			}
	 	});
	}
	//生成全量包
	fs.emptyDirSync(paths.packAll);
  fs.copySync(paths.appBuild, paths.packAll, {
    dereference: true,
    filter: filePath => {
			//去除模块包
    	let states = fs.statSync(filePath);
    	if(states.isDirectory()){
	    	if(filePath.indexOf(path.join('static', 'js', '/')) !== -1 ||
	    		filePath.indexOf('.svn') !== -1){
	    		return false;
	    	}
    	}
    	return true;
    }
  });
  //生成版本号
	paths.packAge = path.resolve(process.cwd(), 'package.json');
  let packAge = require(paths.packAge);
  //let version = packAge.version.split('.');
  //version[2] = (parseInt(version[2], 10) + 1).toString();
  //packAge.version = version.join('.');
  let readme = [];
  readme.push('Version: ' + packAge.version);
  readme.push('Name: ' + packAge.name);
  readme.push('Describe:' + packAge.releaseDescription);
  readme.push('Update: ' + new Date());
  readme.push('Copyright: LEEDARSON XIAMEN.FUJIAN.CHINA');
  writeFile(path.resolve(paths.pack, "readme.txt"), readme.join(' \n'));
  //writeFile(paths.packAge, JSON.stringify(packAge, null, 2));
  //写入文件utf-8格式
	function writeFile(fileName, data){
		fs.writeFile(fileName, data, 'utf-8', complete);
		function complete(){
  		console.log(fileName + "文件生成成功");
 		} 
	}
	//关于页面版本号更新
	/*paths.settingAbout = path.resolve(process.cwd(), 'src/setting/about.js');
	fs.readFile(paths.settingAbout, 'utf-8', function(err, data){ 
	 	if(err){ 
	  	console.log(err); 
	 	}else{
	 		data = data.replace(/(\d)+.(\d)+.(\d)+/gi, packAge.version);
			writeFile(paths.settingAbout, data);
	 	} 
	})*/
}